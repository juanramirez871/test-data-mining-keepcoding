---
title: "Análisis AirBnB Madrid"
format: html
editor: visual
---

```{r}
# Cargar dataset
airbnb <- read.csv("airbnb-listings.csv", sep = ";")
options(repr.plot.height=4, repr.plot.width=6, repr.plot.res = 300)
```

```{r}
# Paso 1: Filtrado y selección de columnas
# Solo entradas de Madrid, tipo 'Entire home/apt' y barrio no vacío
# Luego se eliminan columnas no necesarias

df_madrid <- subset(airbnb, City == "Madrid" & Room.Type == "Entire home/apt" & Neighbourhood != "")
df_madrid <- df_madrid[, c("Neighbourhood", "Accommodates", "Bathrooms", 
                           "Bedrooms", "Beds", "Price", "Square.Feet", 
                           "Guests.Included", "Extra.People", 
                           "Review.Scores.Rating", "Latitude", "Longitude")]
df_madrid[1:5, ]  # Mostrar las primeras 5 filas
```

```{r}
# Paso 2: Crear columna metros cuadrados

df_madrid$Square.Meters <- df_madrid$Square.Feet * 0.092903
df_madrid[, c("Square.Feet", "Square.Meters")][1:5, ]  # Mostrar ejemplo
```

```{r}
# Paso 3: Porcentaje de NA en metros cuadrados

percent_na <- mean(is.na(df_madrid$Square.Meters)) * 100
percent_na
```

```{r}
# Paso 4: Porcentaje de ceros entre los valores NO NA

zeros <- sum(df_madrid$Square.Meters == 0, na.rm = TRUE)
non_na <- sum(!is.na(df_madrid$Square.Meters))
percent_zeros <- (zeros / non_na) * 100
percent_zeros
```

```{r}
# Paso 5: Reemplazar ceros por NA

df_madrid$Square.Meters[df_madrid$Square.Meters == 0] <- NA
summary(df_madrid$Square.Meters)
```

```{r}
# Paso 6: Histograma de metros cuadrados

hist(df_madrid$Square.Meters, main = "Histograma de metros cuadrados",
     xlab = "Metros cuadrados", col = "skyblue", breaks = 30)
```

```{r}
# Paso 7: Asignar NA a valores < 20m2

df_madrid$Square.Meters[df_madrid$Square.Meters < 20] <- NA
summary(df_madrid$Square.Meters)
```

```{r}
# Paso 8: Eliminar barrios donde todos los metros cuadrados son NA

library(dplyr)
df_madrid <- df_madrid %>%
  group_by(Neighbourhood) %>%
  filter(!all(is.na(Square.Meters))) %>%
  ungroup()
length(unique(df_madrid$Neighbourhood))
```

```{r}
# Paso 9: Comprobar si todos los barrios tienen la misma media

anova_model <- aov(Square.Meters ~ Neighbourhood, data = df_madrid)
summary(anova_model)
```

```{r}
# Paso 10: Matriz de similaridad de Tukey

tukey <- TukeyHSD(anova_model)
pvals <- tukey$Neighbourhood[, "p adj"]
head(pvals)
```

```{r}
# Paso 11: Matriz de distancias y dendrograma

# Obtener la tabla de resultados del test de Tukey
tukey_df <- as.data.frame(tukey$Neighbourhood)

# Extraer los nombres de barrios comparados (ej. "A-B")
comparisons <- strsplit(rownames(tukey_df), "-")

# Lista única de barrios
barrios <- unique(unlist(comparisons))

# Crear matriz cuadrada de p-valores
p_matrix <- matrix(NA, nrow = length(barrios), ncol = length(barrios),
                   dimnames = list(barrios, barrios))

# Rellenar matriz simétrica con los p-valores
for (i in 1:nrow(tukey_df)) {
  b1 <- comparisons[[i]][1]
  b2 <- comparisons[[i]][2]
  pval <- tukey_df$`p adj`[i]
  p_matrix[b1, b2] <- pval
  p_matrix[b2, b1] <- pval
}

# Diagonal con 0 (distancia de un barrio consigo mismo)
diag(p_matrix) <- 0

# Convertir en matriz de distancias: distancia = 1 - pvalor
dist_mat <- as.dist(1 - p_matrix)

# Agrupamiento jerárquico
hc <- hclust(dist_mat)

# Dibujar dendrograma
plot(hc, main = "Dendrograma de barrios", xlab = "", sub = "")

```

```{r}
# Paso 12: Cortar en clusters y asignar ID a cada barrio

clusters <- cutree(hc, h = 0.8)
df_madrid$neighb_id <- clusters[match(df_madrid$Neighbourhood, names(clusters))]
table(df_madrid$neighb_id)
```

```{r}
# Paso 13: Dividir en train/test y entrenar modelo

set.seed(123)
train_idx <- sample(seq_len(nrow(df_madrid)), size = 0.7 * nrow(df_madrid))
train <- df_madrid[train_idx, ]
test <- df_madrid[-train_idx, ]

modelo <- lm(Square.Meters ~ Accommodates + Bathrooms + Bedrooms + Beds +
               Price + Guests.Included + Extra.People + 
               Review.Scores.Rating + Latitude + Longitude + neighb_id,
             data = train)
summary(modelo)
```

```{r}
# Paso 14: Evaluar el modelo

pred_test <- predict(modelo, newdata = test)
mse <- mean((test$Square.Meters - pred_test)^2, na.rm = TRUE)
mse
```

```{r}
# Paso 15: Predicción para piso en Sol con 3 y 4 habitaciones

nuevo <- data.frame(
  Accommodates = 6,
  Bathrooms = 1,
  Bedrooms = 3,
  Beds = 3,
  Price = 80,
  Guests.Included = 6,
  Extra.People = 0,
  Review.Scores.Rating = 80,
  Latitude = mean(df_madrid$Latitude, na.rm = TRUE),
  Longitude = mean(df_madrid$Longitude, na.rm = TRUE),
  neighb_id = clusters["Sol"]
)
pred_3habs <- predict(modelo, newdata = nuevo)

nuevo$Bedrooms <- 4
pred_4habs <- predict(modelo, newdata = nuevo)

pred_3habs
pred_4habs
```

```{r}
# Paso 16: Rellenar NA con predicción del modelo

df_madrid$Square.Meters_Pred <- predict(modelo, newdata = df_madrid)
df_madrid$Square.Meters[is.na(df_madrid$Square.Meters)] <-
  df_madrid$Square.Meters_Pred[is.na(df_madrid$Square.Meters)]
summary(df_madrid$Square.Meters)

```